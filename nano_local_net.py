#!/usr/bin/env python

import requests
import json
import logging
import os
import sys
from nano_rpc import Api
from config.parse_nano_local_config import get_env_variables, get_config_from_path, get_set_node_names, write_docker_compose, get_preconfigured_peers
from config.parse_nano_local_config import Config_rw
import argparse
import math
import time

# * Create (this will create the one time resources that need creating)
# * Start (this will start the nodes)
# * InitialBlocks (create an initial ledger structure common to all, epoch1 and 2 and canary blocks, etc)
# * RunTest
# * Stop (stop the nodes but do not destroy anything)
# * Destroy (destroy all autogenerated resources, so that we can start from virgin state next time)
# And have a config file to describe options

config_rw = Config_rw()
#built from 
_node_path = {"container" : "./nano_nodes"}
nano_rpc = Api("localhost:45000")

def get_default(config_name):
    #minimal node config if no file is provided in the nano_local_config.toml
    if config_name == "config_node" :
        return {"rpc" : {"enable" : True} , 
                       "node" : {"allow_local_peers" : True, "enable_voting" : True}}
    if config_name == "config_rpc" :
        return {"enable_control" : True, "enable_sign_hash" : True}  

def create_node_folders(node_name):
    global _node_path

    node_name = node_name.lower() #docker-compose requires lower case names
    commands = [ "mkdir -p nano_nodes",                 
                f"cd nano_nodes && mkdir -p {node_name}",
                f"cd nano_nodes/{node_name} && mkdir -p NanoTest" ]

    for command in commands:
        os.system(command)

    _node_path[node_name] = {"data_path" :       f"./nano_nodes/{node_name}/NanoTest",
                            "config_node_path" : f"./nano_nodes/{node_name}/NanoTest/config-node.toml",
                            "config_rpc_path"  : f"./nano_nodes/{node_name}/NanoTest/config-rpc.toml"}


def docker_add_account(container,command, genesis_key = None):
    #command = nano-workspace/build/nano_node --network test ##for custom biulds using dsiganos/nano-workspace
    #comand = /usr/bin/nano_node ##when using existing docker-tags from nanocurrency/nano-test

    wallet_create =    f"docker exec -it {container} {command} --wallet_create"
    wallet_list =      f"docker exec -it {container} {command} --wallet_list | awk 'FNR == 1 {{print $3}}' | tr -d '\r'"
    account_create =   f"docker exec -it {container} {command} --account_create --wallet={wallet}"
    wallet_add_adhoc = f"docker exec -it {container} {command} --wallet_add_adhoc --wallet={wallet} --key={genesis_key}"
    account_get =      f"docker exec -it {container} {command} --wallet_list | awk 'FNR == 2 {{print $1}}' | tr -d '\r')"

    os.system(wallet_create)
    wallet = os.popen(wallet_list).read()
    if genesis_key != None : os.system(account_create)
    if genesis_key == None : os.system(wallet_add_adhoc)
    account = os.popen(account_get).read()

    return {"wallet" : wallet, "account" : account}


def write_config_node(node_name):
    config_node = get_config_from_path(node_name, "config_node_path")
    if config_node is None :
        logging.warn("No config-node.toml found. minimal version was created")
        config_node = get_default("config_node")

    config_node["node"]["preconfigured_peers"] = get_preconfigured_peers()
    config_rw.write_toml(_node_path[node_name]["config_node_path"], config_node)    
 
def write_config_rpc(node_name):
    config_rpc = get_config_from_path(node_name, "config_rpc_path")
    if config_rpc is None :
        logging.warn("No config-rpc.toml found. minimal version was created")
        config_rpc = get_default("config_rpc")

    config_rw.write_toml(_node_path[node_name]["config_rpc_path"], config_rpc) 


def set_env_variables():
    env_variables = get_env_variables()
    genesis_block = generate_genesis_open(env_variables['genesis_pkey'])
    env_variables["genesis_block"] = f"'NANO_TEST_GENESIS_BLOCK={genesis_block}'"
    env_variables["NANO_TEST_GENESIS_PUB"] = json.loads(genesis_block)["source"]
    print(env_variables["genesis_block"])
    print(env_variables["NANO_TEST_GENESIS_PUB"])

def generate_genesis_open(genesis_pkey):
    command = f'docker exec -it nano_private_genesis /usr/bin/nano_node --debug_bootstrap_generate --key={genesis_pkey}'
    kill_command = "kill $(ps -ef | grep 'nano_node --debug_bootstrap_generate' | awk 'FNR=1 {print $2}')"
    with os.popen(command) as p :        
        print_line = False
        counter = 7
        str_1 = "{"
        while True:
            if print_line : 
                counter = counter -1
                str_1 = str_1 + (str(p.readline()).strip())
            if print_line == False :
                if str(p.readline()).strip() == "{":
                    print_line = True
            
            if counter == 0 : break    
    os.system(kill_command)
    os.system("reset")
    # os.system("reset")
    return str_1 
    

def prepare_nodes(genesis_node_name = "nl_genesis"):
    #prepare genesis 
    prepare_node_env("nano_private_genesis")
    #prepare nodes from config
    for node_name in get_set_node_names():
        prepare_node_env(node_name)
       
def prepare_node_env(node_name):     
    create_node_folders(node_name)
    write_config_node(node_name)
    write_config_rpc(node_name)  

def start_nodes():
    dir_nano_nodes = _node_path["container"]
    command =  f'cd {dir_nano_nodes} && docker-compose up -d --build'
    os.system(command)   
    
def stop_nodes():
    dir_nano_nodes = _node_path["container"]    
    command =  f'cd {dir_nano_nodes} && docker-compose stop'
    os.system(command)

def delete_all():
    dir_nano_nodes = _node_path["container"]
    commands =  [ f'cd {dir_nano_nodes} && docker-compose down',
                  'rm -rf ./nano_nodes' ,
                  'rm -rf ./__pycache__']

    for command in commands:
        os.system(command)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('command',
            help='create , start, init, stop, delete')
    return parser.parse_args()

def main():  

    args = parse_args()

    if args.command == 'create':
        prepare_nodes(genesis_node_name = "nano_private_genesis")
        write_docker_compose(genesis_node_name = "nano_private_genesis")
    elif args.command == 'start':
        start_nodes()
    elif args.command == 'init':
        set_env_variables()       
            
        
    elif args.command == 'stop':
        stop_nodes()
    elif args.command == 'delete':
        delete_all()
    else:
        print('Unknown command %s', args.command)    
   

if __name__=="__main__":
    main()

